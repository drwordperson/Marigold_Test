Ooooohhhkay I looked at the exercise and I don't even really understand it.
It's assuming a level of programming background knowledge that I don't have.

Things I do understand:  (1)  The vending machine problem:  feed coins in, beverages come out, and you need a way to assess (presumably) the coins fed in, the buttons pressed, the beverages dispensed, and the overage of coins returned as change.
Things I do NOT understand:
"Tested via HTTP"
"We don’t want you to re-implement HTTP, nor string-concat JSON" I don't know what any of that means
"All test interactions will be performed with a single content type of “application/json”." I don't know what that is.
Then there comes a table.
I assume it's the specific things it wants me to test for?

The columns in the table are "

Verb 
URI 
Request Body
Response Code
Response Headers
Response Body

Verb <- Not clear on what this is.  Actions of some sort?  "Put (1), put (2), put (3), delete, get (1), get (2).  I'm not sure who is performing the action, though.  Are these actions performed by the vending machine user, or actions performed by the test?

There are some superscripts on these which might help.
1. We return the following header and response code if that item is out of stock.
2. We use this if an attempt to purchase is made, but the number of coins are insufficient.
Still don't think it clarifies my previous question, but let's keep going.

Next column is URI.
It has cryptic entries like / and /inventory and /inventory:id.
Clearly there is some syntax involved.
I think I'm going to go back and look this up when I've gone through the list.

Request body:  the only entry is this...
{
“coin”: 1
}
...so, more syntax I don't understand...
And that's just in a box for number of coins accepted.

Response code:  just numbers.  Presumably the response code back tells you some state but I'm not seeing how states connect to response codes.  I was expecting, more, if X then Y but if Z then A?  Maybe I don't know how to interpret this thing?

Response Headers: this clearly makes more sense.  It's clearly giving you some descriptive text around what the output is.
Array of
remaining
item
quantities, (an
array of
integers)
...for instance.

So, OK, I need to work out what the individual lines mean with all these details, and also I need some framework for understanding how people typically write these sorts of things, since it seems like it assumes some level of background knowledge on the part of the user.

I think my next step is going to be to use some of the mystery words above in Google, and see if I can turn up some stuff that people have written that describes this sort of thing.

"testing via HTTP" seems like a good place to start.

Further Googling reveals that the words I'm looking for are "api testing."

I have located useful information which corresponds to some of the words in the chart.
Basic HTTP commands used in API testing: 
 1. GET: used to fetch data from the  source
 2. POST: used to direct the data to the server. 
 3. PUT: used for data creation 
4. DELETE: used to delete the current state
So that explains Column 1.

GET, used to fetch data from the source.  THe two instances of this get you data on the vending machine inventory.

PUT, used for data creation.  This seems to be used for the insertion of coins into the vending machine.  You create data by physically interacting with the machine in the way it's meant to be interacted with.

DELETE, used to delete the current state, that's where you scrap the current state by having the vending machine spit coins back at you.
That makes a little more sense.

...so far I am not finding good tutorials that work you through actual examples.

But I did go ahead and look up what a URI was.
A URI is a Universal Resource Identifier, identifying where a 
specific resource can be found, such as a page or a document. They are 
used in REST APIs to address resources to developers using an API. You 
may have seen URIs, URLs, and URNs in networking discussions before, but
 how do we tell them apart?
The URI (Universal 
Resource Identifier) is a string identifier that refers to a resource on
 the internet, like a specific document.

OK, so that's where you go looking to find the information you need.
That makes sense.
one of the puts and deletes, there's no existing information, and that's just a /
Those are where you add coins in and spit them out.
/inventory seems to be "tell me everything you have right now in all categories."
/inventory:id seems to be "tell me what you have but in a specific category."
So that makes more sense.

At this point, I turn to a friend for help finding tutorials.  She recommends realpython.com.

I think now what will be the most helpful to me is something that'll give me some syntax I can copy/paste and modify.  I'll go looking for that.

Also I noticed above someone specifically notes that URIs are used specifically in REST APIs, so that may help me narrow down my search.

In the meantime, I think I know the set of test commands they gave me to work with, and I have enough to be able to write specific use cases you need to test for in vending machine use and which test steps you'd need to check them and in which order.

Now that I know better what I'm doing, I break for breakfast and morning exercise. 

---------

I am back.  While on my walk, I thought about the use and failure cases for a vending machine.

The ways you interact with a vending machine are these:
(1)  Coins go in
(2)  Buttons get pushed (for this exercise, only type, not quantity.  Only legit quantity is 1.)
(3)  Coins and cans come out

It follows that the failure cases are these.

(1)  Coins go in
-- Coins can't go in.  The coin slot is blocked?
-- Coins go in, but the vending machine thinks there are no (or an inaccurate number) of coins.
-- There were coins in the vending machine already.  Any remaining coins should have gotten spat out at the end of the previous vending machine interaction.

(2)  Buttons get pushed
-- Button(s) do not work: pushing them does not register anything with the machine
-- Pushing buttons results in inaccurate type of beverage selection registering with machine

(3)  Cans come out
-- There are no cans in the machine at all, or none of the appropriate can type
-- The machine believes it has an inaccurate number/type of cans in its inventory
-- Cans can't come out.  The can slot is blocked, or there's a malfunction in the can-dispensing machinery.
-- Machine is confused, and discharges an inaccurate number/type of can relative to the coins.
-- Machine is confused, and discharges an inaccurate number/type of cans relative to type-selection button presses.

(4)  Coins come out:  NOTE:  I'm assuming this machine has a small buffer where it stores per-transaction coins, and that we're not considering the entire stash of coins it might have from all previous transactions.
-- Coins can't come out.  Coin return slot is physically blocked, or a failure in the coin-return mechanism.
-- An overage of coins was given, but machine does not return excess coins, because it is confused.
-- An insufficient number of coins was given to purchase a beverage, or person decides against purchasing a beverage once coins are inserted, and cancels the transaction, but coins are not returned because the machine is confused.

This raises the further question of how we're actually testing this thing.  Are we just sending computer signals to simulate these inputs/outputs, or is there a dude physically inserting coins, pushing buttons, and counting cans/coins returned at the end?

I'm going to assume the latter, because it's easier to remove test cases if you don't need them than to add them in later on.

Now, I'm going to go back to looking for REST API tutorials that might include the relevant coding bits.

This was pretty helpful and had a lot of code, though not specifically what I was looking for, I think:  https://happycoding.io/tutorials/java-server/rest-api

I found a guide to error codes here:  https://www.lambdatest.com/learning-hub/pytest-api-testing
There are several categories of HTTP response status codes, each representing a different type of response. The most common categories are 1xx, 2xx, 4xx, and 5xx, with each representing a different type of response.

    1xx represents informational responses.
    2xx represents successful responses.
    4xx represents client errors.
    5xx represents server errors.

Also had some useful code samples in it, e.g. 
Code Sample

Here's a code example that demonstrates how to use Requests to make a GET request to an API:

import requests
# Define the API endpoint URL
url = 'https://jsonplaceholder.typicode.com/posts/1'
# Make a GET request to the API endpoint
response = requests.get(url)
# Check the response status code
if response.status_code == 200:
    # Print the response content
    print(response.json())
else:
    # Handle the error
    print('Error: {0}'.format(response.status_code)) 
      

In this example, we imported the Requests library and defined the API endpoint URL. We then make a GET request to the API using the requests.get() function, which returns a response object. We checked the status code of the response to make sure the request was successful and then printed the response content using the response.json() function.

A lot of these so-called tutorials don't have any useful code, and are only there to advertise a course they're selling, it seems like.

Maybe also useful, lots of code:  https://opensource.com/article/21/9/unit-test-python

Perhaps:  https://learning.postman.com/docs/tests-and-scripts/write-scripts/test-examples/

Perhaps:  https://www.travisluong.com/how-to-test-an-api-with-pytest-and-requests/

A lot of these are recommending pytest.  I should look into that.

Pytest documentation: https://docs.pytest.org/en/stable/

------

Update:  A very helpful friend will give me a Pytest tutorial.

Installing Pytest.  Currently, Pytest doesn't run because of a path error.

Can't fix the path error because I can't remember the admin password on that laptop.  "Finally install Ubuntu on that one, the one I hardly use" gets bumped up the priority list.  Going to try the other laptop.

This laptop, too, has path problems.  Python is installed, but it doesn't know where pip is.

Trying to figure out where pip is installed, so I can reset the path variable.

Giant hunt for where Python is even installed.

For some reason Python seems to be installed but my computer doesn't *think* it is, so I'm reinstalling Python from scratch.  I levy some choice words at Windows 11.

I have reinstalled Python and pip STILL does not work.

I spend a long time trying to get the path problems fixed, when Helpful Friend eventually takes pity on me and lets me use a server with python and pytest already installed.  

The bad news is, it's a Ubuntu server, and I have not used a Linux command line before.

(Note that not only Very Helpful Friend, but also Linguist BF, and Linguist BF's Computational Linguist Friend have been trying to FINALLY get me to join the pack of people they can discuss fun Linux things with, and, immediate usefulness aside, I suspect that this is merely one more effort in that direction.)

We both decide to break for lunch.

----------------

Lunch is over.  Turns out she's written some short pieces of pytest code for me already, which, being a bad friend who was very busy for several days, I hadn't had a chance to look at.  She teaches me some basic Linux command line stuff and then lets me stare at the code for a while while I ask questions.  

I think I have enough to go on, so I'm going to take a break.  Next up:  implementing this by writing code for a vending machine, then writing unit tests for the vending machine code using Pytest.

----------

I have prepared for the upcoming challenge by searching "Weirdest German vending machines" on YouTube.  I have personally witnessed vending machines selling ice cream; ketchup, ground beef, steaks, and multiple kinds of sausage; farm-fresh eggs and yogurt; and the bafflingly-named gummy candy known as 'English Winegums.'  I can now add to this list farm-fresh milk; live bait; beer; and laundry detergent bottle refills.  There also was a mention of a cut flower vending machine, which I think I'd seen, in fact, but had forgotten about.  Just as is the case with ice cream (ice cream parlors serve Spaghettieis 'spaghetti ice cream,' which is vanilla ice cream put through a potato ricer to look like spaghetti, then topped with strawberry sauce = bolognese sauce and shaved white chocolate = parmesan), I fear that mighty America lags behind this European nation of 85 million people and far too many very long words.

I now write code for a vending machine.

It turns out that writing a vending machine is more complicated than I thought.  In order to ensure that I have time to write tests, I am going to simplify the vending machine:  there is only one flavor of beverage, and so you only need to ensure the right number of coins.

I now have a working vending machine.  I wish I had a snazzier way to write a 'you didn't give integer coins' vending machine error message, but the present solution works so I'm keeping it.

I now need to write code for a broken vending machine.

I have made one change to break the vending machine.

I have added an Easter egg to the vending machine.

Lunch break.

-----------

All right.  Now, the testing part.

If I had infinite time, here's what I'd do.

(0)  I'd fix a bug:  on the round where you can add more coins, there's nothing to prevent you from adding negative or non-integer values there. 

(0.5)  I'd read up more on the actual manner of testing that this exercise is asking me to implement.  Yesterday, I got as far as having some keywords to look up, and I figured out that a? the? Python package to use was pytest.  I got a tutorial on pytest, some sample code, and a lesson on how to work from a Linux command line.  All of that was useful as far as learning to run tests, but it's clear it's still pretty far from the specifics of what this particular exercise is asking me to do-- none of it referenced http, for instance, or the specific verbs given, or json.  I would need to fill that gap before I could carry out the exercise as written.

(1)  If I were to test my specific vending machine code, here's what I'd do.

First, I'd think through what are the steps, what are the use cases, and how could they go wrong.
-- Inputs: There are two places that are supposed to accept numbers as inputs and two places that are supposed to accept y/n as inputs.  

For the numerical inputs, I need to test that only integers zero and above are accepted as valid inputs, so I would test 2 (correct) and 0 (correct), and 2.5, .5, -1, -1.5 (incorrect).  

For the y/n inputs, I would test to make sure y and n were accepted (along with the Easter egg input) and generate the correct next steps.  I would similarly test that values that were not y or n (or the Easter egg) generated the correct next step.

-- Math:  Several steps here.  Not quite math, but numerical inputs need to be converted from strings to integers (as Python defines them) in order for the script to function.  I would test whether this occurs, and make sure it does not convert any non-integer inputs to integers before it has a chance to trigger the "you didn't give me an integer" error message.  At one point the number of quarters is converted to a dollar value; this needs to be checked for correct functioning.  At one point a new input of quarters can be added to an existing number of quarters; this similarly needs to be checked.  During the coin return after purchase step, two quarters are subtracted from the given number of quarters; this should be checked (it's what I broke in the broken vending machine version.)  The multiplication in the Easter egg would need to be checked, though, honestly, as a joke, it doesn't really matter how many quarters fall out at that point.  I would make that my lowest priority to write a test for.

-- Logic:  Honestly it's a little beyond my present ability to conceptualize what tests for if/else statements would look like, but presumably I need to test whether the appropriate inputs lead to the appropriate places.

(2)  Actual coding.

Let me see go back and see what I'd need to do in order to actually write a test...

-- I need unitttest installed
-- I need pytest installed
-- I need a file __init__.py (two underscores on both sides)
-- The functions to be tested seem to need to be defined as a class. I have not worked with those before and nothing in my code is defined as one, so that entails more reading.
-- I think it would be easy enough to change the code sample I was given to test the math operations I was given above...but then the only way I presently have to run it and test it is out of the command-line-only-including-text-editing Linux server I was previously given access to, which has pytest.  

I think this would take longer than the remaining time I have available, so I'm going to call it quits at this convenient stopping point.  I hope you've enjoyed going along with me on my journey!  